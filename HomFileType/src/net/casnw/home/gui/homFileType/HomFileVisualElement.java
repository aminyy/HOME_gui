/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package net.casnw.home.gui.homFileType;

import java.awt.BorderLayout;
import java.awt.Point;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Action;
import javax.swing.JComponent;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JToolBar;
import net.casnw.home.gui.utils.Common;
import net.casnw.home.gui.utils.DataPoolOperation;
import net.casnw.home.io.ContextDescription;
import net.casnw.home.io.ModelDescription;
import net.casnw.home.io.ModuleDescription;
import net.casnw.home.io.VariableDescription;
import net.casnw.home.io.XMLParse;
import net.casnw.home.modules.api.Module;
import net.casnw.home.meta.ModuleMetaObj;
import net.casnw.home.meta.VariableMetaObj;
import net.casnw.home.meta.metaParse;
import org.netbeans.api.visual.widget.Widget;
import org.netbeans.core.spi.multiview.CloseOperationState;
import org.netbeans.core.spi.multiview.MultiViewElement;
import org.netbeans.core.spi.multiview.MultiViewElementCallback;
import org.openide.awt.UndoRedo;
import org.openide.util.Exceptions;
import org.openide.util.ImageUtilities;
import org.openide.util.Lookup;
import org.openide.util.NbBundle.Messages;
import org.openide.util.lookup.AbstractLookup;
import org.openide.util.lookup.InstanceContent;
import org.openide.util.lookup.Lookups;
import org.openide.util.lookup.ProxyLookup;
import org.openide.windows.TopComponent;

@MultiViewElement.Registration(
        displayName = "#LBL_HomFile_VISUAL",
        iconBase = "net/casnw/home/gui/homFileType/alarmclock.png",
        mimeType = "text/hom+xml",
        persistenceType = TopComponent.PERSISTENCE_NEVER,
        preferredID = "HomFileVisual",
        position = 2000
)
@Messages("LBL_HomFile_VISUAL=图形化设计")
public final class HomFileVisualElement extends JPanel implements MultiViewElement {

    private HomFileDataObject obj;
    private Lookup lookup;
    private JToolBar toolbar = new JToolBar();
    private transient MultiViewElementCallback callback;
    private JScrollPane jsp = new JScrollPane();
    private GraphSceneImpl scene;
    static String modulesFile = "C:\\modules.xml";
    private ModelDescription modelDes;
    private DataPoolOperation dpo = null;
    
    public HomFileVisualElement(final Lookup lkp) throws IOException {
        obj = lkp.lookup(HomFileDataObject.class);
        scene = lkp.lookup(GraphSceneImpl.class);
        lookup = new ProxyLookup(lkp, Lookups.singleton(new HomNavigatorLookupHint()));
        assert obj != null;
        initComponents();
        setLayout(new BorderLayout());
        JComponent component;
        if (scene == null) {
            scene = new GraphSceneImpl(obj);
        }
        if (scene.getView() == null) {
            component = scene.createView();
        } else {
            component = scene.getView();
        }
        showModelImpl();
 
        jsp.setViewportView(component);
        add(jsp, BorderLayout.CENTER);

        scene.validate();
        InstanceContent ic = new InstanceContent();
        Lookup dynamicLookup = new AbstractLookup(ic);
        lookup = new ProxyLookup(dynamicLookup, getLookup());
        ic.add(PaletteSupport.createPalette());
    }

    @Override
    public String getName() {
        return "HomFileVisualElement";
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton1 = new javax.swing.JButton();

        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(HomFileVisualElement.class, "HomFileVisualElement.jLabel1.text")); // NOI18N

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "include", "link" }));

        org.openide.awt.Mnemonics.setLocalizedText(jButton1, org.openide.util.NbBundle.getMessage(HomFileVisualElement.class, "HomFileVisualElement.jButton1.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(jButton1)
                .addContainerGap(187, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addContainerGap(267, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables
    @Override
    public JComponent getVisualRepresentation() {
        return this;
    }

    @Override
    public JComponent getToolbarRepresentation() {
        toolbar.setFloatable(false);
        return toolbar;
    }

    @Override
    public Action[] getActions() {
        return new Action[0];
    }

    @Override
    public Lookup getLookup() {
        return lookup;
    }

    @Override
    public void componentOpened() {
    }

    @Override
    public void componentClosed() {
    }

    @Override
    public void componentShowing() {
        Object obj = lookup.lookup(InstanceContent.class);
        lookup.lookup(InstanceContent.class).add(scene);
    }

    @Override
    public void componentHidden() {
        lookup.lookup(InstanceContent.class).remove(scene);
    }

    @Override
    public void componentActivated() {
    }

    @Override
    public void componentDeactivated() {
    }

    @Override
    public UndoRedo getUndoRedo() {
        return UndoRedo.NONE;
    }

    @Override
    public void setMultiViewCallback(MultiViewElementCallback callback) {
        this.callback = callback;
        callback.getTopComponent().setDisplayName(obj.getPrimaryFile().getNameExt());
    }

    @Override
    public CloseOperationState canCloseElement() {
        return CloseOperationState.STATE_OK;
    }

 private void showModelImpl() {
        List<VariableDescription> variableList;
        List<ModuleDescription> componentList;
        try { 
           XMLParse xmlp = new XMLParse(obj.getPrimaryFile().getPath());
            modelDes = xmlp.getModelDescription();
            dpo = new DataPoolOperation(modelDes);
           Module  m= new Module();           
           String modelName = modelDes.getInstanceName();//根级
           m.setEle(modelDes.getEle());
           m.setName(modelName);       
           
           m.setIcon(ImageUtilities.loadImage("net/casnw/home/gui/homFileType/model.png"));
           m.setCode(modelDes.getInstanceClass());
           List<VariableDescription> vdList = modelDes.getVariableList();
           List<VariableMetaObj> vmList = new ArrayList<>();
                    //从类文件中解析出元数据对象
                    ModuleMetaObj mmo = metaParse.parseModuleMeta(modelDes.getInstanceClass());
                    for (VariableDescription vd : vdList) {
                        VariableMetaObj vmo = new VariableMetaObj();
                        vmo.setContext(vd.getVariableContext());
                        vmo.setDataType(vd.getVariableType());
                        vmo.setName(vd.getVariableName());
                        //  vmo.setSize(Integer.parseInt(vd.getVariableSize()));
                        vmo.setValue(vd.getVariableValue());
                        vmList.add(vmo);
                    }
                    mmo.setVarMetaObjList(vmList);
                    m.setMmo(mmo);
            Widget root = scene.addNode(m);
             
            root.setPreferredLocation(new Point(100,100));
           componentList = modelDes.getModuleList();//取出所有context
           //System.out.println("取出所有context===="+componentList.size());          
           for (int i = 0; i < componentList.size(); i++) {
            ModuleDescription moduleDes = componentList.get(i);
            //System.out.println("moduleDes======"+i+"============="+moduleDes.getInstanceName()); 
           // System.out.println("moduleDes======"+i+"============="+moduleDes.getInstanceClass());  
           ShowContext(((ContextDescription)(moduleDes)),m);               
        }
        } catch (Exception ex) {
       }
    
    }
       
    private void ShowContext(ContextDescription cd,Module father){
         List<ModuleDescription> componentList; 
         List<Module> seqCon = new ArrayList<>();
         String edge = "contain";
       try {
            Module m = new Module();
            m.setEle(cd.getEle());
            m.setName(cd.getInstanceName());
            String str=cd.getInstanceClass();
            String image="net/casnw/home/gui/palette/icon/"+str.substring(str.lastIndexOf('.')+1,str.length())+".png";
            
            List<VariableDescription> vdList = cd.getVariableList();
            componentList = cd.getModuleList();//取出所有module
            List<VariableMetaObj> vmList = new ArrayList<>();
                    //从类文件中解析出元数据对象
                    ModuleMetaObj mmo = metaParse.parseModuleMeta(cd.getInstanceClass());
                    for (VariableDescription vd : vdList) {
                        VariableMetaObj vmo = new VariableMetaObj();
                        vmo.setContext(vd.getVariableContext());
                        vmo.setDataType(vd.getVariableType());
                        vmo.setName(vd.getVariableName());
                        //  vmo.setSize(Integer.parseInt(vd.getVariableSize()));
                        vmo.setValue(vd.getVariableValue());
                        vmList.add(vmo);
                    }
                    mmo.setVarMetaObjList(vmList);
                    m.setMmo(mmo);
                    m.setMd(cd);
                    m.setIcon(ImageUtilities.loadImage(image));
                            
                    System.out.println("scene.addEdge("+father.getName()+","+m.getName()+")");
                   Widget widget= scene.addNode(m);                                                                     
                   //widget.getActions().addAction(ActionFactory.createPopupMenuAction(new WidgetPopupMenu(GraphSceneImpl.this,obj)));
                    scene.addEdge(father,m,edge);
        
                 
           for (int i = 0; i < componentList.size(); i++) {             
             ModuleDescription componentDes = componentList.get(i);
             System.out.println(componentDes.getInstanceName());
             System.out.println("componentDes instanceof ContextDescription=="+(componentDes instanceof ContextDescription));                                 
             if (componentDes instanceof ContextDescription) {
               // System.out.println("====ShowContext====m==========="+m.getName());
                ShowContext(((ContextDescription)(componentDes)),m);
             }else{//解析模块 
                  //ShowModul(componentDes, second);    
            String  moduleClass = componentDes.getInstanceClass(); //模块类
            String  moduleName =  componentDes.getInstanceName();
            String  moduleImg = "net/casnw/home/gui/palette/icon/"+moduleClass.substring(moduleClass.lastIndexOf('.')+1,moduleClass.length())+".png";
            Module module = new Module();
            module.setName(moduleName);
            List<VariableDescription> moduleVar = componentDes.getVariableList();
            List<VariableMetaObj> vmList1 = new ArrayList<>();
            ModuleMetaObj modulemmo = metaParse.parseModuleMeta(componentDes.getInstanceClass());
                for (VariableDescription vd : moduleVar) {
                    VariableMetaObj vmo1 = new VariableMetaObj();
                    vmo1.setContext(vd.getVariableContext());
                    vmo1.setDataType(vd.getVariableType());
                    vmo1.setName(vd.getVariableName());
                    //  vmo.setSize(Integer.parseInt(vd.getVariableSize()));
                    vmo1.setValue(vd.getVariableValue());
                    vmList1.add(vmo1);
                }
                modulemmo.setVarMetaObjList(vmList1);
                module.setMmo(modulemmo);
                module.setMd(componentDes);
                module.setIcon(ImageUtilities.loadImage(moduleImg));
               
               // Widget moduleW=scene.addNode(module); 
               // moduleW.setPreferredLocation(new Point(i*100, i*100)); 
                seqCon.add(module);
             }             
          }          
         relationship(seqCon,m); 
       }catch (ClassNotFoundException ex) {
                    Exceptions.printStackTrace(ex);
                }       
    }
 
        private void  relationship(List<Module> w,Module father) {
           Module first; 
           String edge = "";
          for (int i = 0; i < w.size(); i++) {              
              first = w.get(i);              
              //secend = w.get(+1);
             // ConnectionWidget connection = new ConnectionWidget (GraphSceneImpl.this);
            //  connection.setSourceAnchor(AnchorFactory.createCircularAnchor (father, 32));
             // connection.setTargetAnchor(AnchorFactory.createCircularAnchor (first, 32));              
              if(i==0){
                  edge="contain";                   
              //    connection.setTargetAnchorShape(AnchorShape.TRIANGLE_FILLED);//包含
              }else{
                  edge="sequence";
              //     connection.setTargetAnchorShape(AnchorShape.TRIANGLE_HOLLOW);//顺序
              }
               scene.addNode(first);
               System.out.println("scene.addEdge("+father.getName()+","+first.getName()+")");
               scene.addEdge(father,first,edge);
        
              //connectionLayer.addChild(connection);
              father =first;           
          }
        }
    
}
